const axios = require('axios');
require('dotenv').config();

class DataFetcher {
    constructor() {
        this.seoulApiKey = process.env.SEOUL_OPEN_DATA_API_KEY;
        this.youthCenterApiKey = process.env.YOUTHCENTER_API_KEY;
        this.cache = new Map();
        this.cacheExpiry = parseInt(process.env.CACHE_EXPIRY_HOURS) * 60 * 60 * 1000;
    }

    // ÏÑúÏö∏ Ïó¥Î¶∞Îç∞Ïù¥ÌÑ∞Í¥ëÏû• API - Ï≤≠ÎÖÑÏ†ïÏ±Ö Îç∞Ïù¥ÌÑ∞
    async fetchSeoulYouthPolicies() {
        const cacheKey = 'seoul_youth_policies';
        
        // Ï∫êÏãú ÌôïÏù∏
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheExpiry) {
                console.log('üì¶ Using cached Seoul youth policies');
                return cached.data;
            }
        }

        try {
            console.log('üîÑ Fetching fresh Seoul youth policies...');
            
            // ÏÑúÏö∏Ïãú Ï≤≠ÎÖÑÏ†ïÏ±Ö API
            const url = `http://openapi.seoul.go.kr:8088/${this.seoulApiKey}/json/youthPolicy/1/100/`;
            
            const response = await axios.get(url, {
                timeout: 10000
            });

            if (response.data && response.data.youthPolicy) {
                const policies = response.data.youthPolicy.row.map(policy => ({
                    id: `seoul-${policy.POLICY_ID}`,
                    title: policy.POLICY_NAME,
                    category: this.mapCategory(policy.POLICY_TYPE),
                    content: policy.POLICY_DESC,
                    eligibility: policy.TARGET_INFO,
                    amount: policy.SUPPORT_CONTENT,
                    applicationPeriod: policy.APPLY_PERIOD,
                    url: policy.DETAIL_URL || 'https://youth.seoul.go.kr',
                    source: 'seoul_open_data'
                }));

                // Ï∫êÏãú Ï†ÄÏû•
                this.cache.set(cacheKey, {
                    data: policies,
                    timestamp: Date.now()
                });

                return policies;
            }
            
            return [];
        } catch (error) {
            console.error('‚ùå Seoul API Error:', error.message);
            return [];
        }
    }

    // Ïò®ÎùºÏù∏Ï≤≠ÎÖÑÏÑºÌÑ∞ API - Ï†ÑÍµ≠ Ï≤≠ÎÖÑÏ†ïÏ±Ö
    async fetchYouthCenterPolicies() {
        const cacheKey = 'youth_center_policies';
        
        // Ï∫êÏãú ÌôïÏù∏
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheExpiry) {
                console.log('üì¶ Using cached Youth Center policies');
                return cached.data;
            }
        }

        try {
            console.log('üîÑ Fetching fresh Youth Center policies...');
            
            const url = 'https://www.youthcenter.go.kr/opi/openApi.do';
            const params = {
                apiKey: this.youthCenterApiKey,
                display: 100,
                pageIndex: 1,
                srchPolicyId: '',
                query: '',
                bizTycdSel: ''  // Ï†ïÏ±ÖÏú†ÌòïÏΩîÎìú
            };

            const response = await axios.get(url, {
                params,
                timeout: 10000
            });

            if (response.data && response.data.youthPolicy) {
                const policies = response.data.youthPolicy.map(policy => ({
                    id: `youthcenter-${policy.bizId}`,
                    title: policy.polyBizSjnm,
                    category: this.mapCategory(policy.polyRlmCd),
                    content: policy.polyItcnCn,
                    eligibility: `${policy.ageInfo} / ${policy.majrRqisCn}`,
                    amount: policy.sporCn,
                    applicationPeriod: `${policy.rqutPrdCn}`,
                    applicationMethod: policy.rqutProcCn,
                    url: policy.rqutUrla || 'https://www.youthcenter.go.kr',
                    region: policy.polyBizSecd,
                    source: 'youth_center'
                }));

                // Ï∫êÏãú Ï†ÄÏû•
                this.cache.set(cacheKey, {
                    data: policies,
                    timestamp: Date.now()
                });

                return policies;
            }
            
            return [];
        } catch (error) {
            console.error('‚ùå Youth Center API Error:', error.message);
            return [];
        }
    }

    // Ïπ¥ÌÖåÍ≥†Î¶¨ Îß§Ìïë
    mapCategory(type) {
        const categoryMap = {
            'ÏùºÏûêÎ¶¨': 'Ï∑®ÏóÖ',
            'Ï£ºÍ±∞': 'Ï£ºÍ±∞',
            'ÍµêÏú°': 'ÍµêÏú°',
            'Î≥µÏßÄ': 'Î≥µÏßÄ',
            'Ï∞∏Ïó¨': 'Ï∞∏Ïó¨',
            'ÏùºÏûêÎ¶¨Î∂ÑÏïº': 'Ï∑®ÏóÖ',
            'Ï£ºÍ±∞Î∂ÑÏïº': 'Ï£ºÍ±∞',
            'ÍµêÏú°Î∂ÑÏïº': 'ÍµêÏú°',
            '023010': 'Ï∑®ÏóÖ',  // Ï∑®ÏóÖÏßÄÏõê
            '023020': 'Ï∞ΩÏóÖ',  // Ï∞ΩÏóÖÏßÄÏõê
            '023030': 'Ï£ºÍ±∞',  // Ï£ºÍ±∞ÏßÄÏõê
            '023040': 'ÍµêÏú°',  // ÍµêÏú°ÏßÄÏõê
            '023050': 'Î≥µÏßÄ'   // ÏÉùÌôúÏßÄÏõê
        };

        return categoryMap[type] || 'Í∏∞ÌÉÄ';
    }

    // Î™®Îì† Ï†ïÏ±Ö Îç∞Ïù¥ÌÑ∞ ÌÜµÌï© Ï°∞Ìöå
    async fetchAllPolicies() {
        console.log('üöÄ Fetching all policy data...');
        
        const [seoulPolicies, youthCenterPolicies] = await Promise.all([
            this.fetchSeoulYouthPolicies(),
            this.fetchYouthCenterPolicies()
        ]);

        const allPolicies = [...seoulPolicies, ...youthCenterPolicies];
        
        console.log(`‚úÖ Total policies fetched: ${allPolicies.length}`);
        console.log(`  - Seoul: ${seoulPolicies.length}`);
        console.log(`  - Youth Center: ${youthCenterPolicies.length}`);
        
        return allPolicies;
    }

    // ÌÇ§ÏõåÎìúÎ°ú Ï†ïÏ±Ö Í≤ÄÏÉâ
    async searchPolicies(keyword) {
        const allPolicies = await this.fetchAllPolicies();
        
        const results = allPolicies.filter(policy => {
            const searchText = `${policy.title} ${policy.content} ${policy.category}`.toLowerCase();
            return searchText.includes(keyword.toLowerCase());
        });

        return results;
    }

    // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ï†ïÏ±Ö Ï°∞Ìöå
    async getPoliciesByCategory(category) {
        const allPolicies = await this.fetchAllPolicies();
        return allPolicies.filter(policy => policy.category === category);
    }

    // ÏßÄÏó≠Î≥Ñ Ï†ïÏ±Ö Ï°∞Ìöå
    async getPoliciesByRegion(region) {
        const allPolicies = await this.fetchAllPolicies();
        return allPolicies.filter(policy => 
            policy.region && policy.region.includes(region)
        );
    }

    // Ï∫êÏãú Ï¥àÍ∏∞Ìôî
    clearCache() {
        this.cache.clear();
        console.log('üóëÔ∏è Cache cleared');
    }

    // Ï†ïÏ±Ö ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå
    async getPolicyDetail(policyId) {
        const allPolicies = await this.fetchAllPolicies();
        return allPolicies.find(policy => policy.id === policyId);
    }
}

module.exports = DataFetcher;